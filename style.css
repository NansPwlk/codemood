/* ================================
   CodeMood - Optimized JavaScript
   ================================
*/

// Configuration et constantes
const CONFIG = {
    MAX_ENTRIES: 1000,
    BACKUP_INTERVAL: 24 * 60 * 60 * 1000, // 24 heures
    MAX_STORAGE_SIZE: 5 * 1024 * 1024, // 5MB
    POMODORO_DURATION: 25 * 60, // 25 minutes
    BREAK_DURATION: 5 * 60, // 5 minutes
    LONG_BREAK_DURATION: 15 * 60, // 15 minutes
    POMODOROS_BEFORE_LONG_BREAK: 4
};

const MOODS = {
    'üòä': 'Heureux', 'üöÄ': 'Productif', 'üí°': 'Inspir√©',
    'ü§î': 'Perplexe', 'üò´': 'Fatigu√©', 'ü§Ø': 'D√©pass√©',
    '‚òïÔ∏è': 'Besoin de caf√©', 'üò¥': 'Endormi', 'üéØ': 'Concentr√©',
    'üéâ': 'C√©l√©bration', 'üò§': 'Frustr√©', 'ü§ì': 'En apprentissage'
};

const QUOTES = [
    "Le code est comme l'humour. Quand on doit l'expliquer, c'est mauvais.",
    "Un bon d√©veloppeur est celui qui regarde des deux c√¥t√©s avant de traverser une rue √† sens unique.",
    "Le code propre fait une chose, et la fait bien.",
    "Un probl√®me bien pos√© est √† moiti√© r√©solu.",
    "Le code est lu beaucoup plus souvent qu'il n'est √©crit."
];

// Initialisation du stockage avec chiffrement l√©ger
class StorageManager {
    constructor() {
        this.storage = localStorage;
        this.validateStorage();
    }
    
    encrypt(data) {
        return btoa(unescape(encodeURIComponent(JSON.stringify(data))));
    }
    
    decrypt(data) {
        return JSON.parse(decodeURIComponent(escape(atob(data))));
    }
    
    validateStorage() {
        ['journalEntries', 'settings'].forEach(key => {
            if (!this.get(key)) this.set(key, key === 'settings' ? {} : []);
        });
    }
    
    set(key, value) {
        try {
            this.storage.setItem(key, this.encrypt(value));
        } catch (error) {
            console.error('Erreur de stockage:', error);
        }
    }
    
    get(key) {
        try {
            const item = this.storage.getItem(key);
            return item ? this.decrypt(item) : null;
        } catch (error) {
            console.error('Erreur de lecture:', error);
            return null;
        }
    }
}

const storageManager = new StorageManager();

// Gestion des notifications
class NotificationManager {
    async notify(title, body = '') {
        if (!('Notification' in window)) return;
        if (Notification.permission === 'granted') {
            new Notification(title, { body, icon: '/icon.png' });
        } else if (Notification.permission !== 'denied') {
            await Notification.requestPermission();
        }
    }
}
const notificationManager = new NotificationManager();

// Pomodoro Timer
class PomodoroTimer {
    constructor(updateCallback) {
        this.timeLeft = CONFIG.POMODORO_DURATION;
        this.isActive = false;
        this.isBreak = false;
        this.timer = null;
        this.updateCallback = updateCallback;
        this.pomodorosCompleted = 0;
    }
    
    start() {
        if (this.isActive) return;
        this.isActive = true;
        this.timer = setInterval(() => {
            this.timeLeft--;
            this.updateCallback(this.formatTime(), this.isBreak);
            if (this.timeLeft <= 0) this.complete();
        }, 1000);
    }
    
    pause() {
        clearInterval(this.timer);
        this.isActive = false;
    }
    
    reset() {
        clearInterval(this.timer);
        this.timeLeft = CONFIG.POMODORO_DURATION;
        this.isActive = false;
        this.updateCallback(this.formatTime(), false);
    }
    
    complete() {
        clearInterval(this.timer);
        this.isActive = false;
        this.isBreak = !this.isBreak;
        this.timeLeft = this.isBreak ? CONFIG.BREAK_DURATION : CONFIG.POMODORO_DURATION;
        notificationManager.notify(
            this.isBreak ? 'Pause commenc√©e' : 'Session termin√©e',
            this.isBreak ? 'Prenez une pause' : 'Reprenez le travail!'
        );
        this.updateCallback(this.formatTime(), this.isBreak);
    }
    
    formatTime() {
        const minutes = Math.floor(this.timeLeft / 60);
        const seconds = this.timeLeft % 60;
        return `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
    }
}
const pomodoroTimer = new PomodoroTimer(updatePomodoroDisplay);

// Gestion des citations
function updateQuote() {
    const randomQuote = QUOTES[Math.floor(Math.random() * QUOTES.length)];
    document.getElementById('daily-quote').textContent = `‚Äú${randomQuote}‚Äù`;
}

// Initialisation des √©v√©nements
function setupEventListeners() {
    document.getElementById('theme-toggle').addEventListener('click', toggleTheme);
    document.getElementById('save-entry').addEventListener('click', saveJournalEntry);
    document.getElementById('pomodoro-start').addEventListener('click', () => pomodoroTimer.start());
    document.getElementById('pomodoro-pause').addEventListener('click', () => pomodoroTimer.pause());
    document.getElementById('pomodoro-reset').addEventListener('click', () => pomodoroTimer.reset());
}

// Gestion du mode sombre
function toggleTheme() {
    document.body.classList.toggle('dark');
    storageManager.set('settings', { darkMode: document.body.classList.contains('dark') });
}

// Sauvegarde du journal
function saveJournalEntry() {
    const content = document.getElementById('journal-entry').value.trim();
    if (!content) return;
    
    const entries = storageManager.get('journalEntries');
    entries.unshift({ id: Date.now(), content, timestamp: new Date().toISOString() });
    storageManager.set('journalEntries', entries);
    
    document.getElementById('journal-entry').value = '';
    notificationManager.notify('Entr√©e sauvegard√©e', 'Votre note a √©t√© enregistr√©e avec succ√®s');
}

// Initialisation de l'application
function init() {
    setupEventListeners();
    updateQuote();
    const settings = storageManager.get('settings');
    if (settings?.darkMode) document.body.classList.add('dark');
}

document.addEventListener('DOMContentLoaded', init);
